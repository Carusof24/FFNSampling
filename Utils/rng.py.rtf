{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import numpy as np\
import torch\
\
\
\
""" Numpy random generator """\
\
# Save numpy generator state\
def save_np_state(f):\
    state = np.random.get_state()\
    state = np.array(state, dtype='object')\
    with open(f, 'wb') as ff:\
        np.save(ff, [state])\
\
# Load numpy generator state\
def load_np_state(f):\
    with open(f, 'rb') as ff:\
        state = np.load(ff, allow_pickle='True')\
    state = tuple(state[0])\
    np.random.set_state(state)\
\
\
\
""" Torch random generator """\
\
# Initiate torch random number generator\
def init_torch_generator(seed=0, device='cpu'):\
    generator = torch.Generator(device)\
    generator.manual_seed(seed)\
    return generator\
\
# Save torch generator state\
def save_torch_state(f, generator):\
    state = generator.get_state().detach().numpy().copy()\
    with open(f, 'wb') as ff:\
        np.save(ff, state)\
\
# Load torch generator state\
def load_torch_state(f, generator):\
    with open(f, 'rb') as ff:\
        state = np.load(ff, allow_pickle=True)\
    state = torch.tensor(state, dtype=torch.uint8)\
    generator.set_state(state)\
    return generator}