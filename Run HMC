import torch
import numpy as np
from torch import manual_seed
import os

# ---------- 1. CARICAMENTO PESI E VERIFICA ----------
device = 'cuda' if torch.cuda.is_available() else 'cpu'

# Carica modello e pesi finali
final_weights_path = "/content/drive/MyDrive/weights/final_model_1.pt"
net = FeedforwardNet(input_dim=100, hidden_dim=100, output_dim=10).to(device)
model = NNModel(net, device=device)
model.load(final_weights_path)


# ---------- 2. PARAMETRI HMC ALLINEATI ----------
pars = {
    'moves': 3000,       # 
    'isteps': 30,        #
    'dt': 0.2,          #
    'm': 1.0,
    'T': 1e-6,           #
    'lamda': 1e-5,       # 
    'lob': False
}


# ---------- 3. INIZIALIZZAZIONE HMC ----------
manual_seed(42)
generator = torch.Generator(device=device)
generator.manual_seed(42)

sampler = HMCSampler(
    model=model,
    w0=model.copy(grad=False),
    Cost=Cost,
    Metric=Metric,
    dataset=dataset,
    generator=generator
)

# ---------- 4. AVVIO CAMPIONAMENTO ----------
from google.colab import drive
drive.mount('/content/drive')

from datetime import datetime
# Timestamp dinamico
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")

# Cartella principale su Google Drive
base_dir = "/content/drive/MyDrive/stageHmc"

# Directory dei risultati con timestamp
results_dir = os.path.join(base_dir, f"hmc_results6_{timestamp}")
weights_dir = os.path.join(results_dir, "weights")
os.makedirs(results_dir, exist_ok=True)
os.makedirs(weights_dir, exist_ok=True)

sampler.sample(
    pars=pars,
    results_dir=results_dir,
    weights_dir=weights_dir,
    prefix=prefix,
    start=None,
    keep_going=False,
    save_step=100,
    check_step=100,
    print_step=500,
    wsave_step=500
)


# ---------- 5. CALCOLO E SALVATAGGIO OSSERVABILI MEDIE ----------

# Carica i dati da data.dat (header\tvalori)
data_path = os.path.join(results_dir, 'data.dat')
raw = np.loadtxt(data_path, delimiter='\t', dtype=float, skiprows=1)
# Se vuoi mantenere i nomi delle colonne, puoi leggerli così:
with open(data_path, 'r') as f:
    header = f.readline().strip().split('\t')
cols = {name: raw[:, i] for i, name in enumerate(header)}

# Calcolo delle medie
mean_U_loss    = np.mean(cols['loss'])
mean_cost      = np.mean(cols['cost'])
mean_mod2      = np.mean(cols['mod2'])
mean_train_err = np.mean(1.0 - cols['metric'])

# Stampa a console
print(f"=== OSSERVABILI MEDIE HMC ===")
print(f"U (loss) media            : {mean_U_loss:.6f}")
print(f"Cost media                : {mean_cost:.6f}")
print(f"Modulo² del vettore pesi  : {mean_mod2:.6f}")
print(f"Training error (1-metric) : {mean_train_err:.6f}")

# Salvataggio su Drive
summary_path = os.path.join(results_dir, 'observables_summary.txt')
with open(summary_path, 'w') as f:
    f.write("OSSERVABILI MEDIE HMC6\n")
    f.write(f"U (loss) media            : {mean_U_loss:.6f}\n")
    f.write(f"Cost media                : {mean_cost:.6f}\n")
    f.write(f"Modulo² del vettore pesi  : {mean_mod2:.6f}\n")
    f.write(f"Training error (1-metric) : {mean_train_err:.6f}\n")

print(f"\nRiepilogo salvato in: {summary_path}")
